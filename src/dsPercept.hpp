#ifndef __dsPercept_H#define __dsPercept_H#include <highgui.h>class pcMatrixPercept{    int **matrix;    CvSize f_size;    bool status;    public:        pcMatrixPercept()               //for initial     {        status = false;    }    pcMatrixPercept(const pcMatrixPercept &mat)     //for copying two matrix    {        pcMatrixDestroy();        pcMatrixInit(mat.f_size);                for(int i=0;i<mat.f_size.height;i++)            for(int j=0;j<mat.f_size.width;j++)                matrix[i][j]=mat.matrix[i][j];            }        pcMatrixPercept& operator= (const pcMatrixPercept &mat);        int pcMatrixInit(CvSize frame_size)    {        f_size=frame_size;        matrix = new int* [f_size.width];        for (int i=0; i<f_size.width; i++) {            matrix[i]=new int[f_size.height];            for (int j=0; j<f_size.height; j++) {                matrix[i][j]=0;            }        }                if(matrix)            status = true;        else            status = false;                return status;    }        void pcMatrixDestroy(){            for( int i = 0 ; i < f_size.width ; i++ )        delete [] matrix[i] ;        delete [] matrix;    }        inline int addRelDepth(int x, int y, int value)    {        if(x<0 || x>f_size.width || y>f_size.height || y<0)        {                printf("value out of range.");            return -1;        }                if(!status){                        printf("matrix not init.");            return -1;        }               matrix[x][y]=matrix[x][y]+value;        return 0;            }    inline int getRelDepth(int x, int y)    {        if(!status)        {            printf("matrix not init.");            return -1;        }        return matrix[x][y];    }        ~pcMatrixPercept()    {        pcMatrixDestroy();        status = false;    }    int getWidth()    {        if(!status)        {            printf("matrix not init.");            return -1;        }        return f_size.width;    }    int getHeight()    {        if(!status)        {            printf("matrix not init.");            return -1;        }        return f_size.height;    }    int getStatus()    {        return status;    }    };pcMatrixPercept& pcMatrixPercept::operator= (const pcMatrixPercept &mat){        pcMatrixDestroy();    pcMatrixInit(mat.f_size);        for(int i=0;i<mat.f_size.width;i++)        for(int j=0;j<mat.f_size.height;j++)            matrix[i][j]=mat.matrix[i][j];        return *this;}#endif